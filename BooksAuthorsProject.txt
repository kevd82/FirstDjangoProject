Books/Authors(Shell)


Create 5 books
>>> Book.objects.create(title = "C Sharp", desc = "Learn C Sharp!")
<Book: C Sharp>
>>> Book.objects.create(title = "Java", desc = "Java made easy!")
<Book: Java>
>>> Book.objects.create(title = "Python", "Python coding for everyone!")
  File "<console>", line 1
SyntaxError: positional argument follows keyword argument
>>> Book.objects.create(title = "Python", desc = "Python for all!")
<Book: Python>
>>> Book.objects.create(title = "PHP", desc = "PHP lessons you will love!")
<Book: PHP>
>>> Book.objects.create(title = "Ruby" desc = "A gem of a book!")
  File "<console>", line 1
    Book.objects.create(title = "Ruby" desc = "A gem of a book!")
                                          ^
SyntaxError: invalid syntax
>>> Book.objects.create(title = "Ruby", desc = "A gem of a book!)
  File "<console>", line 1
    Book.objects.create(title = "Ruby", desc = "A gem of a book!)
                                                                ^
SyntaxError: EOL while scanning string literal
>>> Book.objects.create(title = "Ruby", desc = "A gem of a book!")
<Book: Ruby>
>>>




Create 5 authors
>>> Author.objects.create(first_name = "Jane", last_name = "Austen")
<Author: Jane Austen>
>>> Author.objects.create(first_name = "Emily", last_name = "Dickinson")
<Author: Emily Dickinson>
>>> Author.objects.create(first_name = "Fyodor", last_name = "Dostoevsky")
<Author: Fyodor Dostoevsky>
>>> Author.objects.create(first_name = "William", last_name = "Shakespeare")
<Author: William Shakespeare>
>>> Author.objects.create(first_name = "Lau", last_name = "Tzu")
<Author: Lau Tzu>
>>>


Change title of C Sharp to C#
>>> c = Book.objects.get(id=1)
>>> c.title = "C#"
>>> c.save()
>>> Book.objects.get(id=1)
<Book: C#>


Change first name of 4th author to Bill
>>> c = Author.objects.get(id=4)
>>> c.first_name = "Bill"
>>> c.save
<bound method Model.save of <Author: Bill Shakespeare>>
>>> c.save()
>>> Author.objects.get(id=4)
<Author: Bill Shakespeare>


Assign first author to first two books
>>> this_book = Book.objects.get(id=1)
>>> this_author = Author.objects.get(id=1)
>>> this_book.authors.add(this_author)
>>> this_book - Book.objects.get(id=1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'Book' and 'Book'
>>> this_book = Book.objects.get(id=1)
>>> this_book = Book.objects.get(id=2)
>>> this_author = Author.objects.get(id=1)
>>> this_book.authors.add(this_author)
>>> this_author.books.all()
<QuerySet [<Book: C#>, <Book: Java>]>


Assign 2nd author to 1st three books
>>> this_author = Author.objects.get(id=2)
>>> this_book = Book.objects.get(id=1)
>>> this_author.books.add(this_book)
>>> this_book = Book.objects.get(id=2)
>>> this_author.books.add(this_book)
>>> this_book = Book.objects.get(id=3)
>>> this_author.books.add(this_book)
>>> this_author.books.all()
<QuerySet [<Book: C#>, <Book: Java>, <Book: Python>]>


Assign 3rd author to 1st 4 books
>>> this_author = Author.objects.get(id=3)
>>> this_book = Book.objects.get(id=1)
>>> this_author.books.add(this_book)
>>> this_book = Book.objects.get(id=2)
>>> this_author.books.add(this book)
  File "<console>", line 1
    this_author.books.add(this book)
                                  ^
SyntaxError: invalid syntax
>>> this_author.books.add(this_book)
>>> this_book = Book.objects.get(id=3)
>>> this_author.books.object.add(this_book)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'ManyRelatedManager' object has no attribute 'object'
>>> this_author.books.objects.add(this_book)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'ManyRelatedManager' object has no attribute 'objects'
>>> this_author.books.objects.add(this_book)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'ManyRelatedManager' object has no attribute 'objects'
>>> this_book = Book.objects.get(id=3)
>>> this_author.books.add(this_book)
>>> this_book = Book.objects.get(id=4)
>>> this_author.books.add(this_book)
>>> this_author.books.all()
<QuerySet [<Book: C#>, <Book: Java>, <Book: Python>, <Book: PHP>]>
>>>


Assign 4th author to all books
>>> this_author = Author.objects.get(id=4)
>>> this_book = Book.objects.get(id=1)
>>> this_author.books.add(this_book)
>>> this_book = Book.objects.get(id=2)
>>> this_author.books.add(this_book)
>>> this_book = Book.objects.get(id=3)
>>> this_author.books.add(this_book)
>>> this_book = Book.objects.get(id=4)
>>> this_author.books.add(this_book)
>>> this_book = Book.objects.get(id=5)
>>> this_author.books.add(this_book)
>>> this_author.books.all()
<QuerySet [<Book: C#>, <Book: Java>, <Book: Python>, <Book: PHP>, <Book: Ruby>]>
>>>


Retrieve all authors for 3rd book
>>> this_book = Book.objects.get(id=3)
>>> this_book.authors.all()
<QuerySet [<Author: Emily Dickinson>, <Author: Fyodor Dostoevsky>, <Author: Bill Shakespeare>]>
>>>


Remove 1st author of 3rd book
>>> this_book = Book.objects.get(id=3)
>>> this_book.authors.all()
<QuerySet [<Author: Emily Dickinson>, <Author: Fyodor Dostoevsky>, <Author: Bill Shakespeare>]>
>>> this_author = Author.objects.get(self="Emily Dickinson")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: manager_method() got multiple values for argument 'self'
>>> this_author = Author.objects.get(first_name="Emily")
>>> this_book.authors.remove(this_author)
>>> this_book.authors.all()
<QuerySet [<Author: Fyodor Dostoevsky>, <Author: Bill Shakespeare>]>
>>>


Add 5th author to 2nd book
>>> this_book = Book.objects.get(id=2)
>>> this_author = Author.objects.get(id=5)
>>> this_book.authors.add(this_author)
>>>


Find all books for 3rd author
>>> this_author = Author.objects.get(id=3)
>>> this_author.books.all()
<QuerySet [<Book: C#>, <Book: Java>, <Book: Python>, <Book: PHP>]>
>>>


Find all authors of 5th book
>>> this_book = Book.objects.get(id=5)
>>> this_book.authors.all()
<QuerySet [<Author: Bill Shakespeare>]>
>>>